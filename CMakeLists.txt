cmake_minimum_required(VERSION 3.20)
project(sekhmet-core)

# Set utility variables
if (NOT ${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
    set(SEK_TOP_LEVEL FALSE)
else ()
    set(SEK_TOP_LEVEL TRUE)
endif ()
if (UNIX AND NOT APPLE)
    set(LINUX TRUE)
endif ()

# Handle pre C++20 ABI-freeze MSVC versions
if (MSVC AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS_EQUAL 19.30)
    set(CMAKE_CXX_STANDARD 23) # /std:c++latest required for MSVC pre abi-freeze
else ()
    set(CMAKE_CXX_STANDARD 20)
endif ()

# Project build options
option(SEK_ENABLE_IPO "Enable IPO support" ON)

option(SEK_ENABLE_PROFILER "Enable profiling" ON)
if (NOT SEK_ENABLE_SIMD)
    add_compile_definitions(SEK_NO_PROFILER)
endif ()

option(SEK_ENABLE_SIMD "Enable SIMD-accelerated math" ON)
if (NOT SEK_ENABLE_SIMD)
    add_compile_definitions(SEK_NO_SIMD)
endif ()

option(SEK_ENABLE_WIN_PATH "Enable support for Windows drive letters and path separators" OFF)
if (SEK_ENABLE_WIN_PATH)
    add_compile_definitions(SEK_USE_WIN_PATH)
endif ()

option(SEK_ENABLE_TESTS "Build unit tests" OFF)
if (CMAKE_BUILD_TYPE STREQUAL "Debug" OR CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
    set(SEK_ENABLE_TESTS ON CACHE BOOL "Build unit tests" FORCE)
endif ()

# Set project-related variables & properties
set(SEK_CORE_PROJECT ${PROJECT_NAME})
set(SEK_CORE_LIBRARY_PATH $<TARGET_FILE:${SEK_CORE_PROJECT}>)
set(SEK_CORE_SOURCE_DIR ${CMAKE_CURRENT_LIST_DIR}/sekhmet)
set(SEK_CORE_VERSION 0.0.1)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib CACHE STRING "")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin CACHE STRING "")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin CACHE STRING "")

add_library(${SEK_CORE_PROJECT} SHARED)

# Set compiler options
if (MSVC)
    if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
        target_compile_options(${SEK_CORE_PROJECT} PUBLIC /W4 /wd4251)
    else ()
        target_compile_options(${SEK_CORE_PROJECT} PUBLIC /W3)
    endif ()
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    # Enable all warnings & errors for the current project & children
    target_compile_options(${SEK_CORE_PROJECT} PUBLIC "-Wall" "-Wextra" "-Wno-unknown-pragmas" "-Wconversion" "-Werror")

    if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
        target_compile_options(${SEK_CORE_PROJECT} PUBLIC "-fconcepts-diagnostics-depth=32")
    else ()
        # Always set file prefix map to current directory to avoid exposing full directory tree in debug info
        target_compile_options(${SEK_CORE_PROJECT} PUBLIC "-ffile-prefix-map=\"${CMAKE_CURRENT_LIST_DIR}/\"=\"\"")
    endif ()
endif ()

# Enable IPO
if (SEK_ENABLE_IPO)
    include(CheckIPOSupported OPTIONAL RESULT_VARIABLE IPO_MODULE)
    if (NOT IPO_MODULE STREQUAL "NOTFOUND")
        check_ipo_supported(RESULT IPO_FOUND OUTPUT IPO_ERR)
        if (IPO_FOUND)
            set_property(TARGET ${SEK_CORE_PROJECT} PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
        else ()
            message(WARNING "IPO is not supported by the toolchain: ${IPO_ERR}")
        endif ()
    else ()
        message(WARNING "Failed to include IPO CMake module")
    endif ()
endif ()

# Set compilation variables & definitions
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
target_compile_definitions(${SEK_CORE_PROJECT} PRIVATE SEK_CORE_EXPORT)
add_compile_definitions(SEK_CORE_VERSION="${SEK_CORE_VERSION}")
add_compile_definitions(SEK_CORE_VERSION="${SEK_CORE_PROJECT}")

# Find & link thread library
set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)
if (Threads_FOUND)
    set(SEK_THREADS_LIBRARY ${CMAKE_THREAD_LIBS_INIT})
    target_link_libraries(${SEK_CORE_PROJECT} PUBLIC ${SEK_THREADS_LIBRARY})
endif ()

# Include core library subdirectory
include(${SEK_CORE_SOURCE_DIR}/CMakeLists.txt)
# Include third-party projects
include(${CMAKE_CURRENT_LIST_DIR}/third-party/CMakeLists.txt)

 # Include test project
if (SEK_ENABLE_TESTS)
    add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/test test)
endif ()
message("Install prefix: ${CMAKE_INSTALL_PREFIX}")